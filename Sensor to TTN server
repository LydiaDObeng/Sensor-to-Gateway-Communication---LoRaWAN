#!/usr/bin/env python3
# Import necessary libraries
from rak811.rak811_v3 import Rak811  # Importing the Rak811 library
import RPi.GPIO as GPIO  # Importing the GPIO library for Raspberry Pi
import time  # Importing time module for delays
import Adafruit_DHT  # Importing Adafruit DHT library for DHT sensor

# Initialize pin
FloodPin = 6  # Define the pin connected to the flood sensor
sensor = Adafruit_DHT.DHT11  # Define the sensor type
pin = 4  # Define the pin connected to the DHT sensor

# Set up GPIO
GPIO.setmode(GPIO.BCM)  # Set the pin numbering to BCM mode
GPIO.setup(FloodPin, GPIO.IN)  # Set FloodPin as input

# Initialize LoRa module
lora = Rak811()
lora.set_config('lora:work_mode:0')  # Set LoRa work mode
lora.set_config('lora:join_mode:0')  # Set LoRa join mode
lora.set_config('lora:region:US915')  # Set LoRa region
lora.set_config('lora:dev_eui:AC1F09FFF*******')  # Set device EUI
lora.set_config('lora:app_eui:70B3D57ED*******')  # Set application EUI
lora.set_config('lora:app_key:1979F70A82BDFCA50FF4F2**********')  # Set application key
lora.set_config('lora:dr:3')  # Set data rate

try:
    while True:
        # Read water level from flood sensor
        water_level = GPIO.input(FloodPin)
        flood = f"FLOOD: {water_level}"  # Format flood data

        # Read temperature and humidity from DHT sensor
        humidity, temperature = Adafruit_DHT.read_retry(sensor, pin)
        if humidity is not None and temperature is not None:
            # Format temperature and humidity data
            Temp = f"TEMP: {temperature:.1f}Â°C"
            Humi = f"HUMI: {humidity:.1f}%"
        else:
            print("Failed to get data from sensor. Trying again......")

        # Join LoRa network
        lora.join()

        # Send sensor data
        lora.send(flood)
        print("Sent:", flood)
        lora.send(Temp)
        print("Sent:", Temp)
        lora.send(Humi)
        print("Sent:", Humi)

        time.sleep(1)  # Wait for 1 second before next iteration

except KeyboardInterrupt:
    print("Keyboard Interrupt")

    # Send completion message and close LoRa connection
    lora.send('Transmission Done!')
    lora.close()

    # Clean up GPIO
    GPIO.cleanup()
